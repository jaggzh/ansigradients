#!/usr/bin/perl
use POSIX;
use strict;
use warnings;

# ansi code as a number
sub an { my ($r,$g,$b) = @_; 16 + 36*$r + 6*$g + $b; }
# as strings
sub afg { my ($r,$g,$b) = @_; sprintf("\033[38;5;%sm", an($r,$g,$b)); }
sub abg { my ($r,$g,$b) = @_; sprintf("\033[48;5;%sm", an($r,$g,$b)); }
# printed
sub abgp { my ($r,$g,$b) = @_; printf("\033[48;5;%sm", an($r,$g,$b)); }
sub afgp { my ($r,$g,$b) = @_; printf("\033[38;5;%sm", an($r,$g,$b)); }

my $rst = "\033[0m";
my ($r, $g, $b, $a, $n);

print <<EOT;
FG: esc[38;5;#m   BG: esc[48;5;#m
# Number is calculated with: 16 + 36*r + 6*g + b
( The 16 skips the standard 8 colors, 8 bright colors.
  Grays go from [232 to 255] )
EOT
for my $fgbg (38, 48) {
	print("Red values  : {");
	for my $n (0..5) {
		$r=$g=$b=0;  $r=$n;
		$a = an($r, $g, $b);
		print "\033[$fgbg;5;${a}m$a ";
	} print "$rst}\n";
	
	print("Green values: {");
	for my $n (0..5) {
		$r=$g=$b=0;  $g=$n;
		$a = an($r, $g, $b);
		print "\033[$fgbg;5;${a}m$a ";
	} print "$rst}\n";
	
	print("Blue values : {");
	for my $n (0..5) {
		$r=$g=$b=0;  $b=$n;
		$a = an($r, $g, $b);
		print "\033[$fgbg;5;${a}m$a ";
	} print "$rst}\n";
	
	print("Gray values : {");
	for my $a (232..255) { # Note the $a
		print "\033[$fgbg;5;${a}m$a ";
	} print "$rst}\n";
}


# Double-color gradients: 0-5 for each
#     0 0, 1 0, 1 1, 2 1, 2 2, 3 2, 3 3, 4 3, 4 4, 5 4, 5 5
# i:  0  1  2  3  4  5  6  7  8  9  10
# c1: 0  1  1  2  2  3  3  4  4  5  5      ceil(i/2)
# c2: 0  0  1  1  2  2  3  3  4  4  5      floor(i/2)
print("Red-Green values : {");
for my $n (0..9) {
	$r=$g=$b=0;
	$r = ceil($n / 2);
	$g = floor($n / 2);
	$a = an($r,$g,$b);
	print afg($r,$g,$b), "$a ";
} print "$rst}\n";

print("Red-Blue values  : {");
for my $n (0..9) {
	$r=$g=$b=0;
	$r = ceil($n / 2);
	$b = floor($n / 2);
	$a = an($r,$g,$b);
	print afg($r,$g,$b), "$a ";
} print "$rst}\n";

print("Green-Blue values: {");
for my $n (0..9) {
	$r=$g=$b=0;
	$g = ceil($n / 2);
	$b = floor($n / 2);
	$a = an($r,$g,$b);
	print afg($r,$g,$b), "$a ";
} print "$rst}\n";

